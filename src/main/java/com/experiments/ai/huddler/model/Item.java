/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.experiments.ai.huddler.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Item extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4830254845936126935L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"com.bhupi.search.testapp.model\",\"fields\":[{\"name\":\"itemId\",\"type\":[\"long\",\"null\"]},{\"name\":\"leaf_categ_id\",\"type\":[\"long\",\"null\"]},{\"name\":\"gallery_url\",\"type\":[\"string\",\"null\"]},{\"name\":\"embedding\",\"type\":[{\"type\":\"array\",\"items\":[\"float\",\"null\"]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Item> ENCODER =
      new BinaryMessageEncoder<Item>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Item> DECODER =
      new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Item> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Item> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Item to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Item from a ByteBuffer. */
  public static Item fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public Long itemId;
  @Deprecated public Long leaf_categ_id;
  @Deprecated public CharSequence gallery_url;
  @Deprecated public java.util.List<Float> embedding;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Item() {}

  /**
   * All-args constructor.
   * @param itemId The new value for itemId
   * @param leaf_categ_id The new value for leaf_categ_id
   * @param gallery_url The new value for gallery_url
   * @param embedding The new value for embedding
   */
  public Item(Long itemId, Long leaf_categ_id, CharSequence gallery_url, java.util.List<Float> embedding) {
    this.itemId = itemId;
    this.leaf_categ_id = leaf_categ_id;
    this.gallery_url = gallery_url;
    this.embedding = embedding;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return itemId;
    case 1: return leaf_categ_id;
    case 2: return gallery_url;
    case 3: return embedding;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: itemId = (Long)value$; break;
    case 1: leaf_categ_id = (Long)value$; break;
    case 2: gallery_url = (CharSequence)value$; break;
    case 3: embedding = (java.util.List<Float>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'itemId' field.
   * @return The value of the 'itemId' field.
   */
  public Long getItemId() {
    return itemId;
  }

  /**
   * Sets the value of the 'itemId' field.
   * @param value the value to set.
   */
  public void setItemId(Long value) {
    this.itemId = value;
  }

  /**
   * Gets the value of the 'leaf_categ_id' field.
   * @return The value of the 'leaf_categ_id' field.
   */
  public Long getLeafCategId() {
    return leaf_categ_id;
  }

  /**
   * Sets the value of the 'leaf_categ_id' field.
   * @param value the value to set.
   */
  public void setLeafCategId(Long value) {
    this.leaf_categ_id = value;
  }

  /**
   * Gets the value of the 'gallery_url' field.
   * @return The value of the 'gallery_url' field.
   */
  public CharSequence getGalleryUrl() {
    return gallery_url;
  }

  /**
   * Sets the value of the 'gallery_url' field.
   * @param value the value to set.
   */
  public void setGalleryUrl(CharSequence value) {
    this.gallery_url = value;
  }

  /**
   * Gets the value of the 'embedding' field.
   * @return The value of the 'embedding' field.
   */
  public java.util.List<Float> getEmbedding() {
    return embedding;
  }

  /**
   * Sets the value of the 'embedding' field.
   * @param value the value to set.
   */
  public void setEmbedding(java.util.List<Float> value) {
    this.embedding = value;
  }

  /**
   * Creates a new Item RecordBuilder.
   * @return A new Item RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Item RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Item instance.
   * @param other The existing instance to copy.
   * @return A new Item RecordBuilder
   */
  public static Builder newBuilder(Item other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Item instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Item>
    implements org.apache.avro.data.RecordBuilder<Item> {

    private Long itemId;
    private Long leaf_categ_id;
    private CharSequence gallery_url;
    private java.util.List<Float> embedding;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.itemId)) {
        this.itemId = data().deepCopy(fields()[0].schema(), other.itemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.leaf_categ_id)) {
        this.leaf_categ_id = data().deepCopy(fields()[1].schema(), other.leaf_categ_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gallery_url)) {
        this.gallery_url = data().deepCopy(fields()[2].schema(), other.gallery_url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.embedding)) {
        this.embedding = data().deepCopy(fields()[3].schema(), other.embedding);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Item instance
     * @param other The existing instance to copy.
     */
    private Builder(Item other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.itemId)) {
        this.itemId = data().deepCopy(fields()[0].schema(), other.itemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.leaf_categ_id)) {
        this.leaf_categ_id = data().deepCopy(fields()[1].schema(), other.leaf_categ_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gallery_url)) {
        this.gallery_url = data().deepCopy(fields()[2].schema(), other.gallery_url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.embedding)) {
        this.embedding = data().deepCopy(fields()[3].schema(), other.embedding);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'itemId' field.
      * @return The value.
      */
    public Long getItemId() {
      return itemId;
    }

    /**
      * Sets the value of the 'itemId' field.
      * @param value The value of 'itemId'.
      * @return This builder.
      */
    public Builder setItemId(Long value) {
      validate(fields()[0], value);
      this.itemId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'itemId' field has been set.
      * @return True if the 'itemId' field has been set, false otherwise.
      */
    public boolean hasItemId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'itemId' field.
      * @return This builder.
      */
    public Builder clearItemId() {
      itemId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'leaf_categ_id' field.
      * @return The value.
      */
    public Long getLeafCategId() {
      return leaf_categ_id;
    }

    /**
      * Sets the value of the 'leaf_categ_id' field.
      * @param value The value of 'leaf_categ_id'.
      * @return This builder.
      */
    public Builder setLeafCategId(Long value) {
      validate(fields()[1], value);
      this.leaf_categ_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'leaf_categ_id' field has been set.
      * @return True if the 'leaf_categ_id' field has been set, false otherwise.
      */
    public boolean hasLeafCategId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'leaf_categ_id' field.
      * @return This builder.
      */
    public Builder clearLeafCategId() {
      leaf_categ_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'gallery_url' field.
      * @return The value.
      */
    public CharSequence getGalleryUrl() {
      return gallery_url;
    }

    /**
      * Sets the value of the 'gallery_url' field.
      * @param value The value of 'gallery_url'.
      * @return This builder.
      */
    public Builder setGalleryUrl(CharSequence value) {
      validate(fields()[2], value);
      this.gallery_url = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'gallery_url' field has been set.
      * @return True if the 'gallery_url' field has been set, false otherwise.
      */
    public boolean hasGalleryUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'gallery_url' field.
      * @return This builder.
      */
    public Builder clearGalleryUrl() {
      gallery_url = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'embedding' field.
      * @return The value.
      */
    public java.util.List<Float> getEmbedding() {
      return embedding;
    }

    /**
      * Sets the value of the 'embedding' field.
      * @param value The value of 'embedding'.
      * @return This builder.
      */
    public Builder setEmbedding(java.util.List<Float> value) {
      validate(fields()[3], value);
      this.embedding = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'embedding' field has been set.
      * @return True if the 'embedding' field has been set, false otherwise.
      */
    public boolean hasEmbedding() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'embedding' field.
      * @return This builder.
      */
    public Builder clearEmbedding() {
      embedding = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Item build() {
      try {
        Item record = new Item();
        record.itemId = fieldSetFlags()[0] ? this.itemId : (Long) defaultValue(fields()[0]);
        record.leaf_categ_id = fieldSetFlags()[1] ? this.leaf_categ_id : (Long) defaultValue(fields()[1]);
        record.gallery_url = fieldSetFlags()[2] ? this.gallery_url : (CharSequence) defaultValue(fields()[2]);
        record.embedding = fieldSetFlags()[3] ? this.embedding : (java.util.List<Float>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Item>
    WRITER$ = (org.apache.avro.io.DatumWriter<Item>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Item>
    READER$ = (org.apache.avro.io.DatumReader<Item>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  public int hashCode() {
    return Long.hashCode(itemId);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == null || !(obj instanceof Item))
      return false;

    if (obj == this)
      return true;

    return this.itemId == ((Item) obj).getItemId();
  }
}
